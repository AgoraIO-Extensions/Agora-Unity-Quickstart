# --------------------------------------------------------------------------------------------------------------------------
# =====================================
# ========== Guidelines ===============
# =====================================
#
# -------------------------------------
# ---- Common Environment Variable ----
# -------------------------------------
# ${Package_Publish} (boolean): Indicates whether it is build package process, e.g. If you want to get one CI SDK package.
# ${Clean_Clone} (boolean): Indicates whether it is clean build. If true, CI will clean ${output} for each build process.
# ${is_tag_fetch} (boolean): If true, git checkout will work as tag fetch mode.
# ${is_official_build} (boolean): Indicates whether it is official build release.
# ${arch} (string): Indicates build arch set in build pipeline.
# ${short_version} (string): CI auto generated short version string.
# ${release_version} (string): CI auto generated version string.
# ${build_date} (string(yyyyMMdd)): Build date generated by CI.
# ${build_timestamp} (string (yyyyMMdd_hhmm)): Build timestamp generated by CI.
# ${platform} (string): Build platform generated by CI.
# ${BUILD_NUMBER} (string): Build number generated by CI.
# ${WORKSPACE} (string): Working dir generated by CI.
#
# -------------------------------------
# ------- Job Custom Parameters -------
# -------------------------------------
# If you added one custom parameter via rehoboam website, e.g. extra_args.
# You could use $extra_args to get its value.
#
# -------------------------------------
# ------------- Input -----------------
# -------------------------------------
# ${source_root}: Source root which checkout the source code.
# ${WORKSPACE}: project owned private workspace.
#
# -------------------------------------
# ------------- Output ----------------
# -------------------------------------
# Generally, we should put the output files into ${WORKSPACE}
# 1. for pull request: Output files should be zipped to test.zip, and then copy to ${WORKSPACE}.
# 2. for pull request (options): Output static xml should be static_${platform}.xml, and then copy to ${WORKSPACE}.
# 3. for others: Output files should be zipped to anything_you_want.zip, and then copy it to {WORKSPACE}.
#
# -------------------------------------
# --------- Avaliable Tools -----------
# -------------------------------------
# Compressing & Decompressing: 7za a, 7za x
#
# -------------------------------------
# ----------- Test Related ------------
# -------------------------------------
# PR build, zip test related to test.zip
# Package build, zip package related to package.zip
#
# -------------------------------------
# ------ Publish to artifactory -------
# -------------------------------------
# [Download] artifacts from artifactory:
# python3 ${WORKSPACE}/artifactory_utils.py --action=download_file --file=ARTIFACTORY_URL
#
# [Upload] artifacts to artifactory:
# python3 ${WORKSPACE}/artifactory_utils.py --action=upload_file --file=FILEPATTERN --project
# Sample Code:
# python3 ${WORKSPACE}/artifactory_utils.py --action=upload_file --file=*.zip --project
#
# [Upload] artifacts folder to artifactory
# python3 ${WORKSPACE}/artifactory_utils.py --action=upload_file --file=FILEPATTERN --project --with_folder
# Sample Code:
# python3 ${WORKSPACE}/artifactory_utils.py --action=upload_file --file=./folder --project --with_folder
#
# ========== Guidelines End=============
# --------------------------------------------------------------------------------------------------------------------------
echo unitydemo_branch: $unitydemo_branch
echo Unity_Version: $Unity_Version
echo SDK_Version: $SDK_Version
echo SDK_Url: $SDK_Url
echo Build_Mac: $Build_Mac
echo Build_Win: $Build_Win
echo Build_IOS: $Build_IOS
echo Build_IOS_SIGN: $Build_IOS_SIGN
echo Build_Android: $Build_Android
echo Plugin_Url: $Plugin_Url
echo appID: $appID
echo RTC: $RTC
echo RTM: $RTM

echo Package_Publish: $Package_Publish
echo is_tag_fetch: $is_tag_fetch
echo arch: $arch
echo source_root: %source_root%
echo output: /tmp/jenkins/${project}_out
echo build_date: $build_date
echo build_time: $build_time
echo release_version: $release_version
echo short_version: $short_version
echo pwd: `pwd`
root=`pwd`

set -ex

UNITY_DIR=/Applications/Unity/Hub/Editor/${Unity_Version}/Unity.app/Contents/MacOS

echo "===========create sdk_project begin================="

#remove api-example AGORA_RTC or AGORA_RTM
python3 $root/ci/build/remove_example_by_macor.py $root/API-Example-Unity/Assets $RTC $RTM

mkdir build_temp
cd build_temp
python3 ${WORKSPACE}/artifactory_utils.py --action=download_file --file=$SDK_Url
unzip -d ./ ./Agora_Unity_*_SDK_*.zip
ls 
echo "===========unzip finish================="
if [ "$RTC" == "true" ]; then
    UNITYPACKAGE_NAME="Agora-RTC-Plugin.unitypackage"
    BUILD_PATH="Build"
else 
    UNITYPACKAGE_NAME="Agora-RTM-Plugin.unitypackage"
    BUILD_PATH="RtmBuild"
fi

$UNITY_DIR/Unity -quit -batchmode -nographics -createProject "sdk_project"
echo "===========create sdk_project finish================="
$UNITY_DIR/Unity -quit -batchmode -nographics -openProjects  "sdk_project" -importPackage "${root}/build_temp/${UNITYPACKAGE_NAME}"
echo "===========import sdk_project finish================="

cd ${root}
echo "===========Demo build begin================="
rm -rf build_temp/sdk_project/Assets/Agora-*-Plugin/API-Example
cp -r build_temp/sdk_project/Assets/Agora-*-Plugin ./API-Example-Unity/Assets
echo "===========copy Agora-*-Plugin to Assets finish ================="

#replace appID 
sed -i "" "s/appID:/appID: ${appID}/g" ./API-Example-Unity/Assets/API-Example/AppIdInput/AppIdInput.asset


#make plugin active
if [ "$Plugin_Url" != "" ]; then
    echo "PluginScene激活中"
    sh ./ci/build/package_plugin.sh ${Plugin_Url} ${WORKSPACE} || exit 1
else
    echo "Plugin_Url 为空.跳过PluginScene"
fi

if [ "$Build_Mac" == "true" ]; then
    $UNITY_DIR/Unity -quit -batchmode -nographics -projectPath "./API-Example-Unity" -executeMethod Agora_RTC_Plugin.API_Example.CommandBuild.BuildMac   
fi

if [ "$Build_IOS" == "true" ]; then
    $UNITY_DIR/Unity -quit -batchmode -nographics -projectPath "./API-Example-Unity" -buildTarget ios -executeMethod Agora_RTC_Plugin.API_Example.CommandBuild.BuildIPhone   
    
    if [ "$Build_IOS_SIGN" == "true" ]; then
        sh ./ci/build/package_ios.sh ${WORKSPACE} ${RTC} ${RTM}
    fi
fi

if [ "$Build_Win" == "true" ]; then
    $UNITY_DIR/Unity -quit -batchmode -nographics -projectPath "./API-Example-Unity" -executeMethod Agora_RTC_Plugin.API_Example.CommandBuild.BuildWin32   
    $UNITY_DIR/Unity -quit -batchmode -nographics -projectPath "./API-Example-Unity" -executeMethod Agora_RTC_Plugin.API_Example.CommandBuild.BuildWin64  
fi

if [ "$Build_Android" == "true" ]; then
    $UNITY_DIR/Unity -quit -batchmode -nographics -projectPath "./API-Example-Unity" -executeMethod Agora_RTC_Plugin.API_Example.CommandBuild.BuildAndroid   
    sh ./ci/build/package_android.sh ${WORKSPACE} ${RTC} ${RTM}
fi


echo "===========Demo build end================="

#zip all file
mkdir Demo_zip
demo_files=`ls ./$BUILD_PATH`
for file in ${demo_files}
do
    no_suffix_file=${file%.*}
    7za a ./Demo_zip/Unity_Demo_${SDK_Version}_${no_suffix_file}_${build_date}_${build_time}.zip ./$BUILD_PATH/${file}  
done

#upload all file
demo_zips=`ls ./Demo_zip`
for zip_file in ${demo_zips}
do
   python3 ${WORKSPACE}/artifactory_utils.py --action=upload_file --file=./Demo_zip/${zip_file} --project
done